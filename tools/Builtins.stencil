
extension Entity {
{% for type in types.all where type.name == "builtin.globals" %}
{% for var in type.staticVariables %}
    static var {{ var.name }} = Entity.makeBuiltin("{{ var.name|replace:"`","" }}", flags: .type)
{% endfor %}
{% endfor %}
}

extension ty {
{% for type in types.all where type.name == "builtin.globals" %}
{% for var in type.staticVariables %}
    static var {{ var.name }} = builtin.globals.{{ var.name }}.type
{% endfor %}
{% endfor %}
    static let untypedInteger = builtin.untypedInteger.type
    static let untypedFloat   = builtin.untypedFloat.type
}

var builtinFunctions: [BuiltinFunction] = [
{% for package in types.enums where package.name|hasPrefix:"builtin." %}
{% for var in package.staticVariables where var.typeName|hasPrefix:"BuiltinFunction" %}
    {{ package.name }}.{{ var.name }},
{% endfor %}
{% endfor %}
]

var builtinEntities: [BuiltinEntity] = [
{% for package in types.enums where package.name|hasPrefix:"builtin." %}
{% for var in package.staticVariables where var.typeName|hasPrefix:"BuiltinEntity" %}
    {{ package.name }}.{{ var.name }},
{% endfor %}
{% endfor %}
]

var globalBuiltins: Set<Entity> = {
    return [
    {% for type in types.all where type.name == "builtin.globals" %}
    {% for var in type.staticVariables %}
        builtin.globals.{{ var.name }}.entity,
    {% endfor %}
    {% endfor %}
    ]
}()


// MARK: Package scopes

var builtinPackages: [String: Scope] = [
{% for package in types.enums where package.name|hasPrefix:"builtin." %}
    "{{ package.localName }}": {{ package.name }}.scope,
{% endfor %}
]

{% for package in types.enums where package.name|hasPrefix:"builtin." %}

extension {{ package.name }} {

    static let scope: Scope = {
        let members: [String: Entity] = [
        {% for var in package.staticVariables %}
            {{ package.name }}.{{ var.name }}.entity,
        {% endfor %}
        ].toDictionary(with: { $0.name })
        return Scope(parent: .global, owningNode: nil, isFile: false, isPackage: true, members: members)
    }()
}
{% endfor %}

{% for package in types.enums where package.name|hasPrefix:"builtin.types" %}

extension {{ package.name }} {

    {% for var in package.staticVariables %}
    static var {{ var.name|replace:"`","" }}Type: Type { return {{ package.name }}.{{ var.name }}.type }
    {% endfor %}
}
{% endfor %}
