
#library "libc"

#foreign libc #callconv "c" {
    printf :: (fmt: *u8, args: #cvargs ..any) -> i32
}

makeSlice :: fn(a, b: u8) -> []u8 {
    // We are storing the slice values in an array on the stack. Meaning the address is invalid after return
    return []u8{a, b}
}

main :: fn() -> void {
    slice := makeSlice(1, 2)
    printf("%p\n".raw, slice.raw)

    makeSlice(8, 9) // overrides the values 1 & 2 in slice
    printf("%p\n".raw, slice.raw)

    printf("{0x7ff.........[1, 2], 2, 0} is expected when correct\n".raw)
    printf("{%p[%hhu, %hhu], %lu, %lu}\n".raw, slice.raw, slice.raw[0], slice.raw[1], slice.len, slice.cap)
}

// The following code is equivalent
/*
makeSlice :: fn(a, b: u8) -> Slice {
    arr := [2]u8{a, b}

    slice := Slice{len: 2, cap: 2}
    slice.data = &arr

    return slice
}

Slice :: struct {
    data: rawptr
    len:  u64
    cap:  u64
}
*/

