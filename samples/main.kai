#library "c" libc

print :: (string, ..any) -> void #foreign libc "printf"
length :: (string) -> u64 #foreign libc "strlen"

// Program entry point
main :: () -> void {

    { // Pointers and numbers

        val := 8
        p := &val

        *p = 123

        print("val: %d, p: %d\n", val, p)
    }

    { // Pointers and strings

        str := "Hey\n"
        p := &str

        print(*p)

        *p = "I got changed\n"

        print(*p)
    }

    { // NullablePointers

        name := "Brett"
        len := length(name)

        strPtr : *u8 = name

        print("The string is `%s`\n", name)
        print("The string is `%d` bytes long.\n", len)
        print("The first byte is `%c`\n", *strPtr)

        // Won't compile, you cannot assign `nil` to a pointer.

        // strPtr = nil

        nullableStrPtr := (^u8)(strPtr)
        print("The nullable pointer is `0x%08x`\n", nullableStrPtr)

        nullableStrPtr = nil
        print("The nullable pointer is `0x%08x`\n", nullableStrPtr)
    }

    { // Nested procedure

        foo :: (n: int) -> void {
            n += 5
            print("foo printing %d\n", n)
            n = 4
            print("foo printing %d\n", n)
        }

        n := 5
        foo(n)

        print("main printing %d\n", n)
    }

    { // Arrays

        x : [3]int = { 5, 6, 4 }


        for i := 0; i < 3; i += 1 {
            print("x[%d] = %d\n", i, x[i])
        }
    }

    { // Multiple returns

        addFive :: (x: int, y: int) -> int, int {
            return x + 5, y + 5
        }

        origin :: () -> int, int {
            return 0, 0
        }

        x1, x2 := origin()
        print("x1: %d, x2: %d\n", x1, x2)

        x1, x2 = addFive(x1, x2)
        print("x1: %d, x2: %d\n", x1, x2)

        p1, p2 := &x1, &x2
        print("p1: %d, p2: %d\n", *p1, *p2)

        *p1, *p2 = addFive(*p1, *p2)
        print("p1: %d, p2: %d\n", *p1, *p2)
    }

    {
        print("%d\n", 2 + 4 * 10)

        x := 5
        y := &x
        z := &y
        print("%d\n", **z)
    }
}

