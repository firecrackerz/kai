
#test "int to ptr cast" {
    x : u64    = 13
    y : rawptr = cast(rawptr) x
    z : u64    = cast(u64) x
    assert(x == 13)
}

#test "integer literal to pointer cast" {
    x := cast(*u16) 0xB8000
    y := cast(u64)  x
    assert(y == 0xB8000)
}

#test "pointer reinterpret const float to int" {
    float: f64 = 5.99999999999994648725e-01
    float_ptr := &float
    int_ptr := cast(*i32) float_ptr
    int_val := <int_ptr
    assert(int_val == 858993411)
}

#test "cast float literal to integer" {
    x := cast(i64) 6.28
    y := cast(i64) 1e4
    assert(x == 6)
    assert(y == 10000)
}

#test "cast enum to backing type" {
    Reg :: enum(u32) { r0; r1; r2; r3; r4; r5; r6; r7 }

    assert(cast(u32) Reg.r0 == 0)
    assert(cast(u32) Reg.r5 == 5)
}

#test "cast associates with unary expressions" {
    a : u16 = 0xBEEF
    val := cast(u64)a << 16
    assert(val == 0xBEEF << 16)
}
